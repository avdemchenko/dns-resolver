import { encodeDomainName } from './encodeDomainName'
import { generateIdentifier } from './generateIdentifier'

/**
 * Creates a DNS query packet for the specified domain.
 *
 * This function constructs a DNS query packet that can be sent to a DNS server
 * to request information about the given domain name. The packet includes
 * various fields, such as the transaction identifier, flags, and the encoded
 * domain name. The query type is set to "A" (IPv4 address) and the query class
 * is set to "IN" (Internet).
 *
 * @param {string} domain - The domain name to query (e.g., "example.com").
 * @param {Buffer} [identifier=generateIdentifier()] - An optional unique identifier for the query.
 * If not provided, a new identifier is generated by the `generateIdentifier` function.
 *
 * @returns {Buffer} - A Buffer representing the DNS query packet.
 */
export function createDNSQuery(
  domain: string,
  identifier = generateIdentifier()
) {
  const flags = Buffer.from([0x00, 0x00])
  const questionCount = Buffer.from([0x00, 0x01])
  const answerRR = Buffer.from([0x00, 0x00])
  const authorityRR = Buffer.from([0x00, 0x00])
  const additionalRR = Buffer.from([0x00, 0x00])
  const encodedDomain = encodeDomainName(domain) // Encoded domain name
  const type = Buffer.from([0x00, 0x01]) // Query type (A record)
  const classBuffer = Buffer.from([0x00, 0x01]) // Query class (IN)

  const query = Buffer.concat([
    identifier,
    flags,
    questionCount,
    answerRR,
    authorityRR,
    additionalRR,
    encodedDomain,
    type,
    classBuffer,
  ])

  return query
}
